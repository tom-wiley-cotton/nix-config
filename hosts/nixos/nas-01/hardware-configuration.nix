# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod"];

  # Intel A390
  boot.initrd.kernelModules = ["i915"];
  hardware.enableRedistributableFirmware = true;
  boot.kernelParams = [
    "i915.fastboot=1"
    "i915.enable_guc=3"
    #"i915.force_probe=4e71"  # For Raptor Lake
  ];
  hardware.firmware = [pkgs.linux-firmware];
  hardware.graphics = {
    enable = true;
    extraPackages = with pkgs; [
      # intel-vaapi-driver # For older processors. LIBVA_DRIVER_NAME=i965

      # VA-API drivers
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      intel-vaapi-driver
      libvdpau-va-gl

      # OpenCL and compute support
      intel-compute-runtime
      intel-gmmlib
      onevpl-intel-gpu

      # VA-API utilities and libraries
      libva
      libva-utils

      # Diagnostic tools
      glxinfo
      pciutils
    ];
  };
  environment.sessionVariables = {
    LIBVA_DRIVER_NAME = "iHD";
    LIBVA_DRIVERS_PATH = "/run/opengl-driver/lib/dri";
    LIBVA_MESSAGING_LEVEL = "1";
    GST_VAAPI_ALL_DRIVERS = "1";
  }; # environment.variables = {
  #   VDPAU_DRIVER = lib.mkIf config.hardware.opengl.enable (lib.mkDefault "va_gl");
  # };

  # hardware.graphics = {
  #   enable = true;
  #   extraPackages = with pkgs; [
  #     (
  #       if (lib.versionOlder (lib.versions.majorMinor lib.version) "23.11")
  #       then vaapiIntel
  #       else intel-vaapi-driver
  #     )
  #     libvdpau-va-gl
  #     intel-media-driver
  #   ];
  # };

  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp65s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp72s0f3u1u1c2.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
